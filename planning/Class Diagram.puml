@startuml
'https://plantuml.com/class-diagram
top to bottom direction
interface Upgradable {}

abstract class UpgradeItem {
+ {static} REPAIR_TOWER
+ {static} TEMP_FASTER_TOWER_RELOAD
+ {static} TEMP_SLOWER_CART
+ {static} FILL_CART
- name: String
- description: String
- costPrice: int
- cartUpgrade: boolean
- towerUpgrade: boolean
---
+ canApply(upgradable): boolean
+ apply((upgradable)
}

class TowerType {
- name: String
- description: String
- resourceType: ResourceType
- costPrice: int
- resourceAmount: int
- reloadSpeed: Duration
}

TowerType --o ResourceType : "[0..1]"

interface Item {
+ getPurchasableType(): Purchasable
}

enum ResourceType {
+ {static} WOOD: ResourceType
+ {static} STONE: ResourceType
+ {static} ORE: ResourceType
+ {static} ENERGY: ResourceType
}

'Game'
class GameEnvironment {
- {static} instance: GameEnvironment
- stateHandler: GameStateHandler
- controller: GameController
- assetLoader: AssetLoader
- randomEvents: RandomEvents
- roundFactory: GameRoundFactory
- shop: Shop
- playerName: String
- rounds: int
- difficulty: GameDifficulty
- gameRoundProperty: Property<GameRound>
- map: GameMap
--
+ load()
+ setupNextRound()
+ beginRound()
+ playRound()
+ pauseRound()
+ completeRound()
+ setRound(GameRound)
+ setDifficulty(gameDifficulty)
}

class GameStateHandler {
- gameStateProperty: Property<GameState>
- previousGameState: GameState
--
+ setState(gameState)
+ handleChangedGameStateRoundNotStarted()
+ handleChangedGameStateRoundActive()
+ handleChangedGameStateRoundPause()
+ handleChangedGameStateRoundComplete()
+ handleChangedGameStateRandomEventDialogOpen()
+ handleChangedGameStateGameComplete()
}

class AssetLoader {
- tileTemplates: Map<Integer, TileTemplate>
- towerImages: Map<TowerType, Image>
- brokenTowerImages: Map<TowerType, Image>
- upgradeItemImages: Map<UpgradeItem, Image>
- jsonParser: JSONParser
- cartImage: Image
- fullCartImage: Image
--
+ {static} readImage(path): Image
+ loadMap(name, path)
- loadTiles()
- loadTowerImages()
- loadCartImages()
- loadUpgradeItemImages()
- readMapMatrix(jsonMapMatrix): Tile[][]
- readJsonResource(path): Object
}

class TileTemplate {
- buildable: boolean
- path: true
--
+ createTile(x, y): Tile
}

class RandomEvents {
- randomEvents: List<RandomEvent>
--
+ requestRandomEvent(): RandonEvent
}

interface RandomEvent {
+ isAvailable(): boolean
+ apply()
}

class RandomEventBrokenTower {}
class RandomEventTowerStatesDecrease {}
class RandomEventTowerStatesIncrease {}

class GameRoundFactory {
+ getRound(roundNumber): GameRound
}

class Shop {
- money: int
--
+ purchaseItem(item): boolean
+ sellItem(item)
+ subtractMoney(amount)
+ addMoney(amount)
}

enum GameDifficulty {
+ {static} EASY: GameDifficulty
+ {static} NORMAL: GameDifficulty
+ {static} HARD: GameDifficulty
- name: String
- startingMoney: int
- moneyEarnMultiplier: double
- sellPriceModifier: double
- towerReloadModifier: double
- cartVelocityMultiplier: float
- randomEventOdds: double
}

class GameRound {
- roundNumber: int
- carts: List<Cart>
- roundEndActions: Set<Runnable>
}

class GameMap {
- name: String
- tiles: Tile[][]
- polylinePath: PolylinePath
- towers: Map<Tower, Tile>
- pathLength: int
- mapInteraction: MapInteraction
--
+ getTileAt(gridX, gridY): Tile
+ getTileFromScreenPosition(screenX, screenY): Tile
+ addTower(tower, tile)
+ removeTower(tower)
+ calculatePathDuration(velocity): float
+ setInteraction(mapInteraction)
}

class Tile {
- buildable: boolean
- path: boolean
- x: int
- y: int
- tower: Tower
}

class MapInteraction {
+ {static} NONE: MapInteraction
+ {static} PLACE_TOWER: MapInteraction
+ {static} PLACE_UPGRADE: MapInteraction
}

class GameState {
- {static} ROUND_NOT_STARTED: GameState
- {static} RANDOM_EVENT_DIALOG_OPEN: GameState
- {static} ROUND_ACTIVE: GameState
- {static} ROUND_PAUSE: GameState
- {static} ROUND_COMPLETE: GameState
- {static} GAME_COMPLETE: GameState
}

class CartState {
- {static} WAITING: CartState
- {static} TRAVERSING_PATH: CartState
- {static} COMPLETE_PATH: CartState
}

class Tower {
- towerType: TowerType
- broken: boolean
- lastGenerateTime: long
- reloadSpeedModifier: DOUBLE
- xpLevel: int
---
+ incrementXpLevel(amount)
+ addReloadSpeedModifier()
+ canGenerate(): boolean
}

class Cart {
- maxCapacity: int
- velocity: float
resourceType: ResourceType
- spawnAfterTicks: int
- cartState: CartState
- currentCapacity: int
- velocityModifier: float
}

Cart --o ResourceType : "[0..1]"
Cart --o CartState : "[0..1]"
Cart --|> Upgradable

class UpgradeItemRepairTower {}
class UpgradeItemFasterReload {}
class UpgradeItemSlowerCart {}
class UpgradeItemFillCart {}

GameEnvironment --o GameDifficulty : "[0..1]"
GameEnvironment --* GameStateHandler : "[0..1]"
GameEnvironment --* AssetLoader : "[0..1]"
GameEnvironment --* RandomEvents : "[0..1]"
GameEnvironment --* GameRoundFactory : "[0..1]"
GameEnvironment --* Shop : "[0..1]"
GameEnvironment -- GameRound : "[1..1]"
GameEnvironment --* GameMap : "[0..1]"

GameRoundFactory -- GameRound : "creates"
GameStateHandler --o GameState : "[0..1]"

GameMap --* Tile : "many"
GameMap --o MapInteraction : "[0..1]"
GameMap --o Tower : "many"

RandomEvents --o RandomEvent : "many"
RandomEvent <|-- RandomEventBrokenTower
RandomEvent <|-- RandomEventTowerStatesDecrease
RandomEvent <|-- RandomEventTowerStatesIncrease


UpgradeItem --|> Purchasable
UpgradeItem --|> Item
UpgradeItem <|-- UpgradeItemRepairTower
UpgradeItem <|-- UpgradeItemFasterReload
UpgradeItem <|-- UpgradeItemSlowerCart
UpgradeItem <|-- UpgradeItemFillCart

Tower --|> Item
Tower --|> Upgradable
Tower --* TowerType : "[0..1]"
TowerType --|> Item

AssetLoader --* TileTemplate : "many"

rectangle {
left to right direction
'gui'
    class App {
        + {static} main(args)
    }

    class ApplicationWindow {
        + start(primaryStage)
        + {static} launchWrappers(args)
    }
    class WindowManager {
        - pane: Pane
        - stage: Stage
        --
        + loadSetupScreen()
        + loadGameScreen()
    }
    class MainController {
        - windowManager: WindowManager
        - nameValidatorService: NameValidatorService
        --
        + init()
    }
    class GameController {
        - mapInteractionController: MapInteractionController
        - inventoryController: InventoryController
        - shopController: ShopController
        - fxWrappers: FXWrappers
        --
        + init()
        + showNotification(text, duration)
        + toggleInventoryVisible(visible)
        + showSellItemPopup(item)
        + showRandomEventDialog(text)
        - updateRoundCounter(currentRound)
        - showStartButton()
        - showPauseButton()
        - showResumeButton()
        - showRoundCompletePopup()
        - showGameEndPopup()
        - show(node)
        - hide(node)
        + updateButton(button, purchasable)
    }
    class InventoryController {
        - gameController: GameController
        - MapInteractionController: MapInteractionController
        - reserveTowers: Map<Button, Tower>
        --
        + init()
        - placeTowerIntoInventory(tower, towerButton)
        - retrieveTower(towerButton)
    }
    class ShopController {
        - gameController: GameController
        - shopButtons: Map<Button, Purchasable>
        ---
        + init()
        - updateGUI(money)
    }
    class MapInteractionController {
        - gameController: GameController
        - selectedItem: Item
        - selectedImageView: ImageView
        ---
        + init()
        + tryPurchaseItem(purchasable)
        + sellSelectedItem()
        + startPlacingItem(item)
        + stopPlacingItem()
        + tryPlaceSelectedTower()
        + tryMoveTower(tile)
        - removeTower(tower)
        - tryUpgradeCart(screenX, screenY)
        - tryUpgradeTower(tile)
    }
    class FXCart {
        - cart: Cart
        - cartCapacityListener: ChangeListener<Number>
        - cartStateListener: ChangeListener<CartState>
        - cartVelocityModifierListener: ChangeListener<Number>
        - gameStateListener: ChangeListener<GameState>
        --
        - onCapacityUpdate(capacity)
        - onCartStateUpdate(cartState)
        - onCartVelocityModifierChange()
        - onGameStateUpdate()
    }
    class FXTower {
        - tower: Tower
        - towerBrokenListener: ChangeListener<Boolean>
        - lastGenerateTimeListener: ChangeListener<Number>
        --
        onBrokenUpdate(broken)
        onTowerGenerate()
        onTowerRemoved()
    }
    class FXWrappers {
        - fxTowers: Map<Tower, FXTower>
        - fxCarts: Map<Tower, FXCart>
        --
        + findCartAtScreen(int screenX, int screenY): Cart
        - onGameRoundChange(gameRound)
        - onTowersChange(mapChangeListener.Change)
    }

    App --- ApplicationWindow : "launches"
    ApplicationWindow --- WindowManager : "loads"
    WindowManager --- MainController : "loads"
    WindowManager --- GameController : "loads"

    GameController --* MapInteractionController : "[0..1]"
    GameController --* InventoryController : "[0..1]"
    GameController --* ShopController : "[0..1]"
    GameController --* FXWrappers : "[0..1]"

    FXWrappers --* FXCart : "many"
    FXWrappers --* FXTower : "many"
}
MainController --- GameEnvironment : "initializes"
FXCart --> Cart : "has"
FXTower --> Tower : "has"

rectangle {
    class NameValidatorService {
        + {static} VALID_NAME_REGEX: Pattern
        + {static} MIN_NAME_LENGTH: int
        + {static} MAX_NAME_LENGTH: int
        --
        + isValid(name): boolean
    }
    class PathFinderService {
        + {static} X_DIRECTIONS: int[]
        + {static} Y_DIRECTIONS: int[]
        - path: Stack<Point>
        - polylinePath: Polyline
        --
        + generatePathPolyline()
        + calculatePathLength()
        + findPath(tiles, startX, startY, endX, endY)
        - depthFirstSearch(tiles, discovered, x, y, endX, endY)
        - isValidTile(tiles, discovered, x, y)
    }
}
MainController --* NameValidatorService : "[0..1]"
GameMap --- PathFinderService : "uses"
}
@enduml